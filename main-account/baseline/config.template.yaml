Resources:
  ConfigBucket:
    DeletionPolicy: Delete
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub config-storage-${AWS::AccountId}
  ConfigBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSConfigBucketPermissionsCheck
            Effect: Allow
            Principal:
              Service:
              - config.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt ConfigBucket.Arn
          - Sid: AWSConfigBucketDelivery
            Effect: Allow
            Principal:
              Service:
               - config.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub ${ConfigBucket.Arn}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
              # ForAnyValue:StringEquals:
              #   aws:SourceAccount:
              #     Fn::Transform:
              #       Name: AccountListWithMaster


  ConfigConfigurationAggregator:
    Type: "AWS::Config::ConfigurationAggregator"
    Properties:
      OrganizationAggregationSource:
        RoleArn: !GetAtt ConfigAggregationRole.Arn
        AllAwsRegions: true
      ConfigurationAggregatorName: BaselineConfigOrganizationAggregator

  ConfigAggregationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: config.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRoleForOrganizations
