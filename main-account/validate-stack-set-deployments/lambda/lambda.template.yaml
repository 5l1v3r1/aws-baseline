Resources:
  {% if Principal %}
  {{ module_name }}LambdaInvokePermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref {{ module_name }}LambdaFunction
      Principal: {{ Principal }}
      SourceArn: {{ SourceArn | novalue }}
    Type: AWS::Lambda::Permission
  {% endif %}

  {{ module_name }}LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/{{ '${' }}{{ module_name }}LambdaFunction}
      RetentionInDays: {{ LogRetention | novalue }}

  {{ module_name }}LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "{{ Code or "def handler(event, context):\\n    print(event)\\n    return event" }}"
      Handler: {{ Handler or 'index.handler' }}
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: {{ Runtime or 'python3.6' }}
      Timeout: {{ Timeout | novalue }}
      Environment:
        Variables: {{Environment or '!Ref AWS::NoValue' }}

  {{ module_name }}LambdaRolePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Effect: Allow
            Resource: !Sub {{ '${' }} {{ module_name }}LambdaLogGroup.Arn}*
          {% if Statements %}
          {% for statement in Statements %}
          - {{ statement }}
          {% endfor %}
          {% endif %}
      PolicyName: {{ module_name | resource }}LambdaPolicy
      Roles:
      - !Ref LambdaExecutionRole
    Type: AWS::IAM::Policy
