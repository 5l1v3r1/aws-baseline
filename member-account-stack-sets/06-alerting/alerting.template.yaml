{% set AlertLevels = AlertLevels or ['Info', 'Warning', 'Error'] %}
Parameters:
  ExportPrefix:
    Type: String
    Default: alerting
  {% for Level in AlertLevels %}
  {{Level}}Email:
    Description: 'Email address that will receive {{Level}} alerts'
    Type: String
    Default: ''
  {% endfor %}
  FallbackEmail:
    Description: 'Email address that will receive alerts if alerts can not be delivered'
    Type: String

Conditions:
{% for Level in AlertLevels %}
  Has{{Level}}Email: !Not [!Equals [!Ref {{Level}}Email, '']]
{% endfor %}

Resources:
  {% for Level in AlertLevels %}
  {{Level}}Topic:
    Type: 'AWS::SNS::Topic'
    Properties: {}

  {{Level}}EmailSubscription:
    Condition: Has{{Level}}Email
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !Ref {{Level}}Email
      Protocol: email
      TopicArn: !Ref {{Level}}Topic

  {{Level}}NumberOfNotificationsFailedTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Alerts could not be delivered'
      Namespace: 'AWS/SNS'
      MetricName: NumberOfNotificationsFailed
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Ref FallbackTopic
      Dimensions:
      - Name: TopicName
        Value: !GetAtt {{Level}}Topic.TopicName
      TreatMissingData: notBreaching
  {% endfor %}

  TopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: ServiceAlertPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: AWSServices
          Effect: Allow
          Principal:
            Service:
            - 'events.amazonaws.com' # Allow CloudWatch Events
            - 'budgets.amazonaws.com' # Allow Budget Notifications
            - 'rds.amazonaws.com' # Allow RDS Events
            - 's3.amazonaws.com' # Allow S3 Event Notifications
          Action: 'sns:Publish'
          Resource: '*'
        - Sid: SNSPublish
          Effect: Allow
          Principal:
            AWS: '*' # Allow CloudWatch Alarms, ElastiCache Notifications, Elastic Beanstalk Notifications, Auto Scaling Notification
          Action: 'sns:Publish'
          Resource: '*'
          Condition:
            StringEquals:
              'AWS:SourceOwner': !Ref 'AWS::AccountId'
        - Sid: SES
          Effect: Allow
          Principal:
            Service: 'ses.amazonaws.com' # Allow SES Notifications & Events
          Action: 'sns:Publish'
          Resource: '*'
          Condition:
            StringEquals:
              'AWS:Referer': !Ref 'AWS::AccountId'
      Topics:
        {% for Level in AlertLevels %}
        - !Ref {{Level}}Topic
        {% endfor %}

  FallbackTopic:
    Type: 'AWS::SNS::Topic'
    Properties: {}

  FallbackEmailSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !Ref FallbackEmail
      Protocol: email
      TopicArn: !Ref FallbackTopic

  PublishToAlertingTopicsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy for pushing to the alert topic from services"
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "sns:Publish"
            Resource:
              {% for Level in AlertLevels %}
              - !Ref {{Level}}Topic
              {% endfor %}

Outputs:
  {% for Level in AlertLevels %}
  {{Level}}Topic:
    Description: 'The ARN of the {{Level}} alert topic.'
    Value: !Ref {{Level}}Topic
    Export:
      Name: !Sub '${ExportPrefix}:{{Level}}Topic'
  {{Level}}TopicName:
    Description: 'The Name of the {{Level}} alert topic.'
    Value: !GetAtt {{Level}}Topic.TopicName
    Export:
      Name: !Sub '${ExportPrefix}:{{Level}}TopicName'
  {% endfor %}

  PublishToAlertingTopicsPolicy:
    Value: !Ref PublishToAlertingTopicsPolicy
    Export:
      Name: !Sub '${ExportPrefix}:PublishToAlertingTopicsPolicy'
