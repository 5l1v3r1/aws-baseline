{% set AvailabilityZones = AvailabilityZones or 3 %}
{% set SubnetIdentifiers = 'ABCDEFGHIJKL'[0:AvailabilityZones] %}

# Based on the Cloudonaut VPC Template

AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC with public and private subnets in {{ AvailabilityZones }} Availability Zone'
Parameters:
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  PrivateNatGateway:
    Description: 'Setting for creating Private Nat Gateways'
    Type: String
    Default: none
    AllowedValues: ["none", "single", "all"]
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '10.${ClassB}.0.0/16'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '10.${ClassB}.0.0/16'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  {% for Identifier in SubnetIdentifiers %}
  Subnet{{ Identifier }}Private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [{{loop.index - 1}}, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.{{(loop.index - 1)*32}}.0/20'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${VPC}-'{{ Identifier }}-Private'
      - Key: Reach
        Value: Private
  Subnet{{ Identifier }}Public:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [{{loop.index - 1}}, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.{{(loop.index - 1)*32+16}}.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${VPC}-'{{ Identifier }}-Public'
      - Key: Reach
        Value: Public

  RouteTable{{ Identifier }}Public:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public
  RouteTable{{ Identifier }}Private:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private

  RouteTableAssociation{{ Identifier }}Public:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet{{ Identifier }}Public
      RouteTableId: !Ref RouteTable{{ Identifier }}Public

  RouteTableAssociation{{ Identifier }}Private:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet{{ Identifier }}Private
      RouteTableId: !Ref RouteTable{{ Identifier }}Private

  RouteTableInternetRoute{{ Identifier }}Public:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable{{ Identifier }}Public
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  SubnetNetworkAclAssociation{{ Identifier }}Public:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet{{ Identifier }}Public
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociation{{ Identifier }}Private:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet{{ Identifier }}Private
      NetworkAclId: !Ref NetworkAclPrivate
  {% endfor %}

  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
Outputs:

  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'
  AZs:
    Description: 'AZs'
    Value: {{ AvailabilityZones }}
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  ClassB:
    Description: 'Class B.'
    Value: !Ref ClassB
    Export:
      Name: !Sub '${AWS::StackName}-ClassB'
  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  SubnetsPublic:
    Description: 'Subnets public.'
    Value:
      Fn::Join:
        - ','
        - {% for Identifier in SubnetIdentifiers%}
          - !Ref Subnet{{ Identifier }}Public
        {% endfor %}
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsPrivate:
    Description: 'Subnets private.'
    Value:
      Fn::Join:
        - ','
        - {% for Identifier in SubnetIdentifiers%}
          - !Ref Subnet{{ Identifier }}Private
        {% endfor %}
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'
  RouteTablesPrivate:
    Description: 'Route tables private.'
    Value:
      Fn::Join:
        - ','
        - {% for Identifier in SubnetIdentifiers%}
          - !Ref RouteTable{{ Identifier }}Private
        {% endfor %}
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPrivate'
  RouteTablesPublic:
    Description: 'Route tables public.'
    Value:
      Fn::Join:
        - ','
        - {% for Identifier in SubnetIdentifiers%}
          - !Ref RouteTable{{ Identifier }}Public
          {% endfor %}
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPublic'
  {% for Identifier in SubnetIdentifiers%}
  AZ{{ Identifier }}:
    Description: 'AZ of {{ Identifier }}'
    Value: !Select [{{loop.index - 1}}, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZ{{ Identifier }}'
  Subnet{{ Identifier }}Public:
    Description: 'Subnet {{ Identifier }} public.'
    Value: !Ref Subnet{{ Identifier }}Public
    Export:
      Name: !Sub '${AWS::StackName}-Subnet{{ Identifier }}Public'
  RouteTable{{ Identifier }}Public:
    Description: 'Route table A public.'
    Value: !Ref RouteTable{{ Identifier }}Public
    Export:
      Name: !Sub '${AWS::StackName}-RouteTable{{ Identifier }}Public'
  Subnet{{ Identifier }}Private:
    Description: 'Subnet {{ Identifier }} private.'
    Value: !Ref Subnet{{ Identifier }}Private
    Export:
      Name: !Sub '${AWS::StackName}-Subnet{{ Identifier }}Private'
  RouteTable{{ Identifier }}Private:
    Description: 'Route table {{ Identifier }} private.'
    Value: !Ref RouteTable{{ Identifier }}Private
    Export:
      Name: !Sub '${AWS::StackName}-RouteTable{{ Identifier }}Private'
  {% endfor %}
